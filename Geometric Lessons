#1 Calculater triangle area
def triangle_area(a:[], b:[], c:[]):
  if len(a)!=len(b) or len(a)!=len(c) or len(a)!=2: return
  a.append(1)
  b.append(1)
  c.append(1)
  A=[a,b,c]
  t=len(a)
  x=0
  for i in A:
    for j in range(t-1):
      i.append(i[j])
  for k in range(t):
    x+=a[k]*b[k+1]*c[k+2]
  for l in range(len(a)-1,len(a)-4,-1):
    x-=a[l]*b[l-1]*c[l-2]
  for m in range(2,len(a)):
    a.pop()
    b.pop()
    c.pop()
  if x==0: return
  else:
    if x<0:
      x=-x
    return x/2

#2 Discover if a dot is a INTERN DOT
def intern_dot(x:[],y:[],a:[]):
  if len(x)!=len(y) or len(a)!=2: return
  if a[0]<min(x) or a[0]>max(x): return False
  if a[1]<min(y) or a[1]>max(y): return False
  for i in range(len(x)):
    j=i+1
    k=i+2
    if k>len(x)-1: k=0
    if j>len(x)-1: j,k=0,1
    b=[x[i],y[i]]
    c=[x[j],y[j]]
    d=[x[k],y[k]]
    if triangle_area(b,c,a)>triangle_area(b,c,d): return False
  return True

#3 Calculate a Matrix determinant
def determinant(A:[]):
  if len(A)!=len(A[0]): return
  n,B,p=len(A),[],1
  for i in range(len(A)):
    B.append([0]*len(A))
    for j in range(len(A[0])):
      B[i][j]=A[i][j]
  for a in range(n):
    for b in range(a+1,n):
      if B[a][a]==0: B[a][a]= 0.0000000000000000001
      s=B[b][a]/B[a][a]
      for c in range(n):
        B[b][c]=B[b][c]-(s*B[a][c])
  for d in range(n):
    p*=B[d][d]
  return round(p)

#4 Discover HILBERT INVERSION
#a)
def Hilbert(n:int):
  H=[]
  for i in range(n):
    H.append([1]*n)
    for j in range(n):
      H[i][j]/=(i+1)+(j+1)-1
  return H

#b)
def HilbertInversion(H:[]):
  if len(H)!=len(H[0]): return
  for i in range(len(H)):
    if H[i][i]==0: return
  A=[]
  for i in range(len(H)):
    A.append([0]*2*len(H))
    for j in range(len(H)):
      A[i][j]=H[i][j]
  for i in range(len(H)):
    for j in range(len(H)):
      if i==j: A[i][j+len(H)]=1
  for i in range(len(H)):
    for j in range(len(H)):
      if i!=j:
        x=A[j][i]/A[i][i]
        for k in range(2*len(H)):
          A[j][k]=A[j][k]-(x*A[i][k])
  for i in range(len(H)):
    d=A[i][i]
    for j in range(2*len(H)):
      A[i][j]/=d
  HI,X=[],[]
  for i in range(len(H)):
    for j in range(len(H),2*len(H)):
      X.append(round(A[i][j]))
    HI.append(X)
    X=[]
  return HI
print(HilbertInversion([[1,1/2,1/3],[1/2,1/3,1/4],[1/3,1/4,1/5]]))

#c)
#print(Hilbert(50),HilbertInversion(Hilbert(50)))
def multmat(A:[],B:[]):
  C=[]
  for i in range(len(A)):
    C.append([0]*len(B[0]))
  for i in range(len(A)):
    for j in range(len(B[0])):
      c=0
      for k in range(len(A[0])):
        c+=A[i][k]*B[k][j]
      C[i][j]=c
  return C
print(multmat(Hilbert(2),HilbertInversion(Hilbert(2))))
