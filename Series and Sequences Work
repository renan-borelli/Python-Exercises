#1
def Frobeius(A:[]):
  Af2=0
  for i in range(len(A)):
    for j in range(len(A[0])):
      Af2+= abs(A[i][j])**2
  return Af2**(0.5)

#2
def ortomat(A:[]):
  if len(A)!=len(A[0]): return
  B=[]
  for i in range(len(A)):
    B.append([0]*len(A[0]))
    for j in range(len(A[0])):
      B[i][j]=A[i][j]*A[j][i]
  value=True
  for k in range(len(B)):
    for l in range(len(B[0])):
      print(B[k][l])
      if k==l and B[k][l]!=1:
        value=False
        break
      if k!=l and B[k][l]!=0:
        value=False
        break
  return value

#3
def trianmat(A:[]):
  if len(A)!=len(A[0]): return
  value=True
  for i in range(len(A)):
    for j in range(len(A[0])):
      if i>j and A[i][j]!=0:
        value=False
        break
  return value


#4
def SLTS(U:[],b:[]):
  if trianmat(U)!=True: return
  x,c,a=[],len(U[0])-1,0
  for i in range(c,-1,-1):
    ax=b[i]/U[i][i]
    for j in range(c,-1,-1):
      b[j]-=U[j][c]/ax
    x.append(ax)
    c-=1
    a+=1
  x.reverse()
  return x

#5
def matlatin(A:[]):
  if len(A)!=len(A[0]): return
  value,B=True,[]
  for i in range(len(A)):
    B.append([0]*len(A))
    for j in range(1,len(A)+1):
      if A[i].count(j)!=1:
        value=False
        break
      B[i][j-1]=A[j-1][i]
  print(B)
  for k in range(len(B)):
    for l in range(1,len(B)+1):
      if B[k].count(l)!=1:
        value=False
        break
  return value
